{"version":3,"sources":["Components/WeatherProjet/ForecastCard.js","Components/WeatherProjet/FavouriteOperator.js","Components/WeatherProjet/WeatherPage.js","Components/WeatherProjet/ChoosenFavourite.js","Components/WeatherProjet/FavouritePage.js","App.js","reportWebVitals.js","index.js"],"names":["ForecastCard","props","className","date","condition","tempmax","tempmin","FavouriteOperator","useState","refresh","setRefresh","finder","i","favouriteList","length","cityName","checkLiked","color","size","onClick","inxToDelete","tempFavourite","cityKey","temperature","cityInfo","cityCondition","forecastList","push","splice","addToFavouriteList","WeatherPage","setCityName","setCityInfo","setCityCondition","setforecastList","currentTemp","setCurrentTemp","key","getCity","city","a","query","fetch","response","json","data","console","log","getWeather","id","getForecasts","Temperature","Metric","Value","DailyForecasts","checkDefault","choosenCityName","choosenCityKey","Object","entries","type","placeholder","onChange","e","target","value","then","Key","fevCityInfo","sevCityCondition","fevForecastList","WeatherText","setFavouriteList","liked","setLiked","LocalizedName","map","element","Date","Day","IconPhrase","Maximum","Minimum","ChoosenFavourite","setChoosenCity","choosenName","choosenKey","setFevCityInfo","setFevCityCondition","setFevForecastList","FavouritePage","to","App","choosenCity","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.855deeff.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\n\r\nexport default function ForecastCard(props){   \r\n  \r\n    return(\r\n        <div className='forecastcard'>\r\n            <h6>{props.date}</h6>\r\n            <h5>{props.condition}</h5>\r\n            <h5>Maximum:{props.tempmax}°F</h5>\r\n            <h5>Minimum:{props.tempmin}°F</h5>    \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\nimport {AiFillHeart,AiOutlineHeart} from 'react-icons/ai';\r\n\r\nexport default function FavouriteOperator(props){   \r\n const [refresh,setRefresh]=useState(false)\r\n const likeCheker =false;\r\n  const addToFavouriteList=()=>{\r\n    debugger;\r\n        let finder =false ;\r\n        let inxToDelete=0;\r\n        for (let i=0; i<props.favouriteList.length;i++){\r\n            if (props.favouriteList[i].cityName==props.cityName){\r\n                finder=true;\r\n                inxToDelete=i;\r\n                break\r\n            }\r\n        }\r\n        if(finder==false){\r\n            let tempFavourite ={\r\n                                cityKey:props.cityKey,\r\n                                cityName:props.cityName,\r\n                                temperature:props.temperature,\r\n                                condition:props.condition,\r\n                                cityInfo:props.cityInfo,\r\n                                cityCondition:props.cityCondition,\r\n                                forecastList:props.forecastList}\r\n            props.favouriteList.push(tempFavourite);  \r\n            setRefresh(!refresh)    \r\n        }else{\r\n            props.favouriteList.splice(inxToDelete,1);   \r\n            setRefresh(!refresh)         \r\n        }\r\n    }\r\n\r\n    const checkLiked=()=>{\r\n        let finder =false ;\r\n        for (let i=0; i<props.favouriteList.length;i++){\r\n            if (props.favouriteList[i].cityName==props.cityName){\r\n                finder=true;\r\n                break\r\n            }\r\n        }\r\n        if(finder==false){\r\n           return false;   \r\n        }else{\r\n            return true;       \r\n        }\r\n    }\r\n    return(\r\n        <div >  \r\n            {checkLiked()==true? <AiFillHeart color='red' className='heartIcon' size='1cm'/>:<AiOutlineHeart className='heartIcon' size='1cm'/> }        \r\n                 <button className='addtofavobutton' onClick={()=>{addToFavouriteList()}}>Add to Favourite</button>  \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\nimport ForecastCard from './ForecastCard';\r\nimport FavouriteOperator from './FavouriteOperator';\r\n\r\nexport default function WeatherPage(props){   \r\n  const [cityName,setCityName]=useState('')\r\n  const [cityInfo,setCityInfo]=useState({})\r\n  const [cityCondition,setCityCondition]=useState({})\r\n  const [forecastList,setforecastList]=useState([])\r\n  const [currentTemp,setCurrentTemp]=useState(0)\r\n  const key ='W2pZfwHWyKHxdJDCBBrV9J1miEYGW6Vv'\r\n  const tempDefault=null;\r\n  //get city information\r\n const getCity =async(city)=>{\r\n    try {\r\n      const base ='https://dataservice.accuweather.com/locations/v1/cities/autocomplete';\r\n      const query=`?apikey=${key}&q=${city}`;\r\n      const response =await fetch(base+query);\r\n      const data= await response.json();\r\n      setCityInfo(data[0]);\r\n      console.log(data)\r\n      return (data[0]);\r\n    } catch (error) {\r\n       console.log(error)\r\n    }\r\n    \r\n } \r\n //get weather information\r\n const getWeather =async(id)=>{\r\n    try {\r\n      const base ='https://dataservice.accuweather.com/currentconditions/v1/';\r\n      const query=`${id}?apikey=${key}`;\r\n      const response =await fetch(base+query);\r\n      const data= await response.json();\r\n      getForecasts(id)\r\n      setCityCondition(data[0]);\r\n      setCurrentTemp(data[0].Temperature.Metric.Value);\r\n      console.log(data)\r\n      return data[0];\r\n    } catch (error) {\r\n       console.log(error)\r\n    }\r\n    \r\n } \r\n //get 5 Days of Daily Forecasts\r\n const getForecasts =async(id)=>{\r\n    try {\r\n      const base ='https://dataservice.accuweather.com/forecasts/v1/daily/5day/';\r\n      const query=`${id}?apikey=${key}`;\r\n      const response =await fetch(base+query);\r\n      const data= await response.json();\r\n      setforecastList(data.DailyForecasts);\r\n      console.log(data)\r\n    } catch (error) {\r\n       console.log(error)\r\n    }\r\n    \r\n } \r\n \r\nconst checkDefault =()=>{\r\n   debugger;\r\n   if (cityName=='' && props.choosenCityName==''&& props.choosenCityKey=='' && forecastList.length==0 &&\r\n    Object.entries(cityInfo).length=== 0&& Object.entries(cityCondition).length=== 0){  \r\n      getCity('tel aviv')\r\n      getWeather('215854')\r\n   }else{\r\n      if(props.choosenCityName!=''&&props.choosenCityKey!=''){   \r\n          return false;   \r\n        //setCityName(props.choosenCityName);\r\n       // setCurrentTemp(props.favouriteList[0].temperature);\r\n       // setCityInfo(props.fevCityInfo);\r\n      //  setCityCondition(props.sevCityCondition);\r\n      //  setforecastList(props.fevForecastList);\r\n\r\n         // getCity(props.choosenCityName)\r\n        // getWeather(props.choosenCityKey)\r\n      }else{\r\n         return null;\r\n\r\n      }\r\n     \r\n   }\r\n}\r\n//.catch(err=>console.log(err))\r\n    return(\r\n        <div>\r\n            \r\n               \r\n                   \r\n                <input type=\"text\" placeholder='Enter the city here..' onChange={e=>setCityName(e.target.value)} /> \r\n                 <button onClick={()=>{getCity(cityName).then(data=>{getWeather(data.Key)}).then(data=>{console.log(data)})      \r\n                 }}>Search</button>  <br /> <br />\r\n                 <div className='mainbox'>\r\n                    <div>\r\n                        {checkDefault()==false?\r\n                        <FavouriteOperator cityInfo={props.fevCityInfo} cityCondition={props.sevCityCondition}\r\n                         forecastList={props.fevForecastList} \r\n                        cityKey={props.choosenCityKey} cityName={props.choosenCityName} \r\n                         temperature={props.favouriteList.temperature} condition={props.sevCityCondition.WeatherText}  \r\n                         favouriteList={props.favouriteList} setFavouriteList={props.setFavouriteList}\r\n                         liked={props.liked} setLiked={props.setLiked}/>:\r\n\r\n                         <FavouriteOperator cityInfo={cityInfo} cityCondition={cityCondition} forecastList={forecastList} \r\n                       cityKey={cityInfo.Key} cityName={cityInfo.LocalizedName} \r\n                        temperature={currentTemp} condition={cityCondition.WeatherText}  \r\n                        favouriteList={props.favouriteList} setFavouriteList={props.setFavouriteList}\r\n                        liked={props.liked} setLiked={props.setLiked}/>\r\n                        }\r\n                      \r\n                    </div>\r\n                         {\r\n                            checkDefault()==false?\r\n                            <h3  id='cityNameBoxone' className='leftToTheBox'>{props.choosenCityName}</h3>:\r\n                            <h3  id='cityNameBoxone' className='leftToTheBox'>{cityInfo.LocalizedName}</h3>\r\n                         }\r\n\r\n                         {\r\n                            checkDefault()==false?\r\n                            <h3 className='leftToTheBox'>{props.favouriteList[0].temperature} °C</h3>:\r\n                            <h3 className='leftToTheBox'>{currentTemp} °C</h3>\r\n                         }\r\n                        \r\n                        {\r\n                            checkDefault()==false?\r\n                            <h4>{props.sevCityCondition.WeatherText}</h4>:\r\n                            <h4>{cityCondition.WeatherText}</h4>\r\n                         }\r\n                        \r\n                         <br /> <br />\r\n                    <div> \r\n                        {checkDefault()==false?\r\n                        props.fevForecastList.map((element)=>(\r\n                            <td>\r\n                             {<ForecastCard date={element.Date} condition={element.Day.IconPhrase}\r\n                              tempmax={element.Temperature.Maximum.Value} tempmin={element.Temperature.Minimum.Value}/>}\r\n                         </td>    \r\n                        )): forecastList.map((element)=>(\r\n                            <td>\r\n                                {<ForecastCard date={element.Date} condition={element.Day.IconPhrase}\r\n                                 tempmax={element.Temperature.Maximum.Value} tempmin={element.Temperature.Minimum.Value}/>}\r\n                            </td>                      \r\n                         ))\r\n                    }\r\n                      {}\r\n                   </div>\r\n                 </div>  \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\n\r\nexport default function ChoosenFavourite(props){   \r\n   const setTheChoosenCity =(cityName,cityKey)=>{\r\n        props.setChoosenCity({choosenName:cityName,choosenKey:cityKey})\r\n        props.setFevCityInfo(props.cityInfo);\r\n        props.setFevCityCondition(props.cityCondition);\r\n        props.setFevForecastList(props.forecastList);\r\n    }\r\n    return(\r\n        <div>   \r\n                <button className='forecastcard' onClick={()=>{setTheChoosenCity(props.cityName,props.cityKey)}}>\r\n                    <h6>{props.cityName}</h6>\r\n                    <h5>{props.temperature}°C</h5>\r\n                    <h5>{props.condition} </h5>\r\n                </button>   \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\nimport ChoosenFavourite from './ChoosenFavourite'\r\n\r\nexport default function FavouritePage(props){   \r\n  \r\n    return(\r\n        <div >\r\n            {props.favouriteList.map((element)=>(     \r\n                <td>\r\n                    <Link to='/'>\r\n                    <ChoosenFavourite cityInfo={element.cityInfo} cityCondition={element.cityCondition} forecastList={element.forecastList}\r\n                     setChoosenCity={props.setChoosenCity} cityName={element.cityName}  setFevCityInfo={props.setFevCityInfo}\r\n                     setFevCityCondition={props.setFevCityCondition} setFevForecastList={props.setFevForecastList}\r\n                     temperature={element.temperature} condition={element.condition} cityKey={element.cityKey}/>  \r\n                    </Link>\r\n                </td>                \r\n            ))}     \r\n        </div>\r\n    )\r\n}","import './App.css';\nimport React, { useState,useEffect } from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport WeatherPage from './Components/WeatherProjet/WeatherPage';\nimport FavouritePage from './Components/WeatherProjet/FavouritePage'\n\n\nfunction App() {\n  const [favouriteList,setFavouriteList]=useState([])\n  const [choosenCity,setChoosenCity]=useState({choosenName:'',choosenKey:''})\n  const [fevCityInfo,setFevCityInfo]=useState({});\n  const [sevCityCondition,setFevCityCondition]=useState({});\n  const [fevForecastList,setFevForecastList]=useState([]);\n\n  return (\n    <div className=\"App\">        \n        <Router>    \n          <br />\n         <Link to='/'><button onClick={()=>setChoosenCity({choosenName:'',choosenKey:''})}>Home</button></Link>  <Link to='/favouritepage'><button>Favourite</button> </Link>\n_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________\n     \n          <Switch>\n             <Route exact path='/' component={() => (<WeatherPage setChoosenCity={setChoosenCity} fevCityInfo={fevCityInfo}\n             sevCityCondition={sevCityCondition} fevForecastList={fevForecastList}\n             choosenCityKey={choosenCity.choosenKey}  choosenCityName={choosenCity.choosenName} favouriteList={favouriteList}/>)}/> \n             <Route exact path='/favouritepage' component={() => (<FavouritePage setChoosenCity={setChoosenCity} \n             setFevCityInfo={setFevCityInfo} setFevCityCondition={setFevCityCondition} setFevForecastList={setFevForecastList}\n              favouriteList={favouriteList}/>)}/>   \n          </Switch>\n        </Router>\n      \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}