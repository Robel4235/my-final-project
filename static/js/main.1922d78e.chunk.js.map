{"version":3,"sources":["Components/WeatherProjet/ForecastCard.js","Components/WeatherProjet/FavouriteOperator.js","Components/WeatherProjet/WeatherPage.js","Components/WeatherProjet/ChoosenFavourite.js","Components/WeatherProjet/FavouritePage.js","App.js","reportWebVitals.js","index.js"],"names":["ForecastCard","props","date","condition","tempmax","tempmin","FavouriteOperator","useState","refresh","setRefresh","finder","i","favouriteList","length","cityName","checkLiked","color","size","className","onClick","inxToDelete","tempFavourite","cityKey","temperature","cityInfo","cityCondition","forecastList","push","splice","addToFavouriteList","WeatherPage","setCityName","setCityInfo","setCityCondition","setforecastList","currentTemp","setCurrentTemp","key","aplhChecker","str","checker","charAt","getCity","city","a","query","fetch","response","json","data","console","log","getWeather","id","undefined","alert","getForecasts","Temperature","Metric","Value","DailyForecasts","checkDefault","choosenCityName","choosenCityKey","Object","entries","type","placeholder","onChange","e","target","value","then","Key","fevCityInfo","sevCityCondition","fevForecastList","WeatherText","setFavouriteList","liked","setLiked","LocalizedName","map","element","Date","Day","IconPhrase","Maximum","Minimum","ChoosenFavourite","setChoosenCity","choosenName","choosenKey","setFevCityInfo","setFevCityCondition","setFevForecastList","FavouritePage","to","App","choosenCity","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1922d78e.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\n\r\nexport default function ForecastCard(props){   \r\n  \r\n    return(\r\n        <div>\r\n            <h6>{props.date}</h6>\r\n            <h5>{props.condition}</h5>\r\n            <h5>Maximum:{props.tempmax}°F</h5>\r\n            <h5>Minimum:{props.tempmin}°F</h5>    \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\nimport {AiFillHeart,AiOutlineHeart} from 'react-icons/ai';\r\n\r\nexport default function FavouriteOperator(props){   \r\n const [refresh,setRefresh]=useState(false)\r\n const likeCheker =false;\r\n  const addToFavouriteList=()=>{\r\n    debugger;\r\n        let finder =false ;\r\n\r\n        let inxToDelete=0;\r\n        for (let i=0; i<props.favouriteList.length;i++){\r\n            if (props.favouriteList[i].cityName==props.cityName){\r\n                finder=true;\r\n                inxToDelete=i;\r\n                break\r\n            }\r\n        }\r\n        if(finder==false){\r\n            let tempFavourite ={\r\n                                cityKey:props.cityKey,\r\n                                cityName:props.cityName,\r\n                                temperature:props.temperature,\r\n                                condition:props.condition,\r\n                                cityInfo:props.cityInfo,\r\n                                cityCondition:props.cityCondition,\r\n                                forecastList:props.forecastList}\r\n            props.favouriteList.push(tempFavourite);  \r\n            setRefresh(!refresh)    \r\n        }else{\r\n            props.favouriteList.splice(inxToDelete,1);   \r\n            setRefresh(!refresh)         \r\n        }\r\n    }\r\n\r\n    const checkLiked=()=>{\r\n        let finder =false ;\r\n        for (let i=0; i<props.favouriteList.length;i++){\r\n            if (props.favouriteList[i].cityName==props.cityName){\r\n                finder=true;\r\n                break\r\n            }\r\n        }\r\n        if(finder==false){\r\n           return false;   \r\n        }else{\r\n            return true;       \r\n        }\r\n    }\r\n    return(\r\n        <div >  \r\n            {checkLiked()==true? <AiFillHeart color='red'  size='1cm'/>:<AiOutlineHeart  size='1cm'/> }        \r\n                 <button className='btn btn-outline-secondary' onClick={()=>{addToFavouriteList()}}>Add to Favourite</button>  \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\nimport ForecastCard from './ForecastCard';\r\nimport FavouriteOperator from './FavouriteOperator';\r\n\r\nexport default function WeatherPage(props){   \r\n  const [cityName,setCityName]=useState('')\r\n  const [cityInfo,setCityInfo]=useState({})\r\n  const [cityCondition,setCityCondition]=useState({})\r\n  const [forecastList,setforecastList]=useState([])\r\n  const [currentTemp,setCurrentTemp]=useState(0)\r\n  const key ='6ZRXGcGjJkGVkunn2MRYb5zp5egELGwW'\r\n  const tempDefault=null;\r\n  const aplhChecker =(str)=>{\r\n     let checker =false;\r\n     for (let i=0; i<str.length;i++){\r\n       \r\n        if (str.charAt(i)>='A'&& str.charAt(i)<='Z' || str.charAt(i)>='a'&& str.charAt(i)<='z'|| str.charAt(i)==\" \"){\r\n                 checker =true;\r\n           }else {\r\n              checker=false;\r\n              break;\r\n           }\r\n        }\r\n        if (checker==true){\r\n           return true\r\n        }else{\r\n           return false\r\n        }\r\n\r\n     }\r\n  \r\n  //get city information\r\n const getCity =async(city)=>{\r\n    debugger;\r\n    if (city==''){\r\n       city ='tel aviv'\r\n    }else {\r\n      if (aplhChecker(city)==false) {\r\n         return false\r\n       }\r\n    }\r\n    try {\r\n      const base ='https://dataservice.accuweather.com/locations/v1/cities/autocomplete';\r\n      const query=`?apikey=${key}&q=${city}`;\r\n      const response =await fetch(base+query);\r\n      const data= await response.json();\r\n      setCityInfo(data[0]);\r\n      console.log(data)\r\n      return (data[0]);\r\n    } catch (error) {\r\n       console.log(error)\r\n    }\r\n    \r\n } \r\n //get weather information\r\n const getWeather =async(id)=>{\r\n    if (id==undefined){\r\n       alert ('Search only in English')\r\n       return \r\n    }\r\n   \r\n    try {\r\n      const base ='https://dataservice.accuweather.com/currentconditions/v1/';\r\n      const query=`${id}?apikey=${key}`;\r\n      const response =await fetch(base+query);\r\n      const data= await response.json();\r\n      getForecasts(id)\r\n      setCityCondition(data[0]);\r\n      setCurrentTemp(data[0].Temperature.Metric.Value);\r\n      console.log(data)\r\n      return data[0];\r\n    } catch (error) {\r\n       console.log(error)\r\n    }\r\n    \r\n } \r\n //get 5 Days of Daily Forecasts\r\n const getForecasts =async(id)=>{\r\n    try {\r\n      const base ='https://dataservice.accuweather.com/forecasts/v1/daily/5day/';\r\n      const query=`${id}?apikey=${key}`;\r\n      const response =await fetch(base+query);\r\n      const data= await response.json();\r\n      setforecastList(data.DailyForecasts);\r\n      console.log(data)\r\n    } catch (error) {\r\n       console.log(error)\r\n    }\r\n    \r\n } \r\n \r\nconst checkDefault =()=>{\r\n   if (cityName=='' && props.choosenCityName==''&& props.choosenCityKey=='' && forecastList.length==0 &&\r\n    Object.entries(cityInfo).length=== 0&& Object.entries(cityCondition).length=== 0){  \r\n      getCity('tel aviv')\r\n      getWeather('215854')\r\n   }else{\r\n      if(props.choosenCityName!=''&&props.choosenCityKey!=''){   \r\n          return false;   \r\n        //setCityName(props.choosenCityName);\r\n       // setCurrentTemp(props.favouriteList[0].temperature);\r\n       // setCityInfo(props.fevCityInfo);\r\n      //  setCityCondition(props.sevCityCondition);\r\n      //  setforecastList(props.fevForecastList);\r\n\r\n         // getCity(props.choosenCityName)\r\n        // getWeather(props.choosenCityKey)\r\n      }else{\r\n         return null;\r\n      }\r\n     \r\n   }\r\n}\r\n//.catch(err=>console.log(err))\r\n    return(\r\n        <div className=\"card\">    \r\n                <input className='form-control' type=\"text\" placeholder='Enter the city here..' onChange={e=>setCityName(e.target.value)} /> \r\n                 <button className='btn btn-secondary' onClick={()=>{getCity(cityName).then(data=>{getWeather(data.Key)}).then(data=>{console.log(data)})      \r\n                 }}>Search</button>  <br /> <br />\r\n                 <div className='card'>\r\n                    <div className='likeButton'>\r\n                        {checkDefault()==false?\r\n                        <FavouriteOperator cityInfo={props.fevCityInfo} cityCondition={props.sevCityCondition}\r\n                         forecastList={props.fevForecastList} \r\n                         cityKey={props.choosenCityKey} cityName={props.choosenCityName} \r\n                         temperature={props.favouriteList.temperature} condition={props.sevCityCondition.WeatherText}  \r\n                         favouriteList={props.favouriteList} setFavouriteList={props.setFavouriteList}\r\n                         liked={props.liked} setLiked={props.setLiked}/>:\r\n\r\n                         <FavouriteOperator cityInfo={cityInfo} cityCondition={cityCondition} forecastList={forecastList} \r\n                         cityKey={cityInfo.Key} cityName={cityInfo.LocalizedName} \r\n                         temperature={currentTemp} condition={cityCondition.WeatherText}  \r\n                         favouriteList={props.favouriteList} setFavouriteList={props.setFavouriteList}\r\n                         liked={props.liked} setLiked={props.setLiked}/>\r\n                        }\r\n                      \r\n                    </div >\r\n                         {\r\n                            checkDefault()==false?\r\n                            <h3  id='cityNameBoxone' className='text-left'>{props.choosenCityName}</h3>:\r\n                            <h3  id='cityNameBoxone' className='text-left'>{cityInfo.LocalizedName}</h3>\r\n                         }\r\n\r\n                         {\r\n                            checkDefault()==false?\r\n                            <h3 className='text-left'>{props.favouriteList[0].temperature} °C</h3>:\r\n                            <h3 className='text-left'>{currentTemp} °C</h3>\r\n                         }\r\n                        \r\n                        {\r\n                            checkDefault()==false?\r\n                            <h4>{props.sevCityCondition.WeatherText}</h4>:\r\n                            <h4>{cityCondition.WeatherText}</h4>\r\n                         }\r\n                        \r\n                         <br /> <br />\r\n                     \r\n                        {checkDefault()==false?\r\n                        props.fevForecastList.map((element)=>(\r\n                            <p className='card'   >\r\n                             {<ForecastCard date={element.Date} condition={element.Day.IconPhrase}\r\n                              tempmax={element.Temperature.Maximum.Value} tempmin={element.Temperature.Minimum.Value}/>}\r\n                            </p>    \r\n                        )): forecastList.map((element)=>(\r\n                            < p className='card'> \r\n                                {<ForecastCard date={element.Date} condition={element.Day.IconPhrase}\r\n                                 tempmax={element.Temperature.Maximum.Value} tempmin={element.Temperature.Minimum.Value}/>}\r\n                            </p>                      \r\n                         ))\r\n                    }\r\n                      {}\r\n                 \r\n                 </div>  \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\n\r\nexport default function ChoosenFavourite(props){   \r\n   const setTheChoosenCity =(cityName,cityKey)=>{\r\n        props.setChoosenCity({choosenName:cityName,choosenKey:cityKey})\r\n        props.setFevCityInfo(props.cityInfo);\r\n        props.setFevCityCondition(props.cityCondition);\r\n        props.setFevForecastList(props.forecastList);\r\n    }\r\n    return(\r\n        <div className='card'>   \r\n                <button className='card' onClick={()=>{setTheChoosenCity(props.cityName,props.cityKey)}}>\r\n                    <h6>{props.cityName}</h6>\r\n                    <h5>{props.temperature}°C</h5>\r\n                    <h5>{props.condition} </h5>\r\n                </button>   \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\nimport ChoosenFavourite from './ChoosenFavourite'\r\n\r\nexport default function FavouritePage(props){   \r\n  \r\n    return(\r\n        <div >\r\n            {props.favouriteList.map((element)=>(     \r\n                <td className='card'>\r\n                    <Link to='/'>\r\n                    <ChoosenFavourite cityInfo={element.cityInfo} cityCondition={element.cityCondition} forecastList={element.forecastList}\r\n                     setChoosenCity={props.setChoosenCity} cityName={element.cityName}  setFevCityInfo={props.setFevCityInfo}\r\n                     setFevCityCondition={props.setFevCityCondition} setFevForecastList={props.setFevForecastList}\r\n                     temperature={element.temperature} condition={element.condition} cityKey={element.cityKey}/>  \r\n                    </Link>\r\n                </td>                \r\n            ))}     \r\n        </div>\r\n    )\r\n}","import './App.css';\nimport React, { useState,useEffect } from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport WeatherPage from './Components/WeatherProjet/WeatherPage';\nimport FavouritePage from './Components/WeatherProjet/FavouritePage'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nfunction App() {\n  const [favouriteList,setFavouriteList]=useState([])\n  const [choosenCity,setChoosenCity]=useState({choosenName:'',choosenKey:''})\n  const [fevCityInfo,setFevCityInfo]=useState({});\n  const [sevCityCondition,setFevCityCondition]=useState({});\n  const [fevForecastList,setFevForecastList]=useState([]);\n\n  return (\n    <div className=\"container\">        \n        <Router>    \n          <br/>\n         <Link to='/'><button className='btn btn-outline-secondary' onClick={()=>setChoosenCity({choosenName:'',choosenKey:''})}>Home</button ></Link> \n         {\" \"} <Link to='/favouritepage'><button className='btn btn-outline-secondary'>Favourite</button> </Link>\n\n     \n          <Switch>\n             <Route exact path='/' component={() => (<WeatherPage setChoosenCity={setChoosenCity} fevCityInfo={fevCityInfo}\n             sevCityCondition={sevCityCondition} fevForecastList={fevForecastList}\n             choosenCityKey={choosenCity.choosenKey}  choosenCityName={choosenCity.choosenName} favouriteList={favouriteList}/>)}/> \n             <Route exact path='/favouritepage' component={() => (<FavouritePage setChoosenCity={setChoosenCity} \n             setFevCityInfo={setFevCityInfo} setFevCityCondition={setFevCityCondition} setFevForecastList={setFevForecastList}\n              favouriteList={favouriteList}/>)}/>   \n          </Switch>\n        </Router>\n      \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}